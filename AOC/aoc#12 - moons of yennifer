class Moon:
	def __init__(self,name,x,y,z):
		self.name = name
		self.pos=[x,y,z]
		self.vel= [0,0,0]
		self.stateset=set()

	def pe(self):
		sum=0
		for i in self.pos:
			sum+=abs(i)
		return sum
	def ke(self):
		sum = 0
		for i in self.vel:
			sum += abs(i)
		return sum
	def te(self):
		return Moon.ke(self)*Moon.pe(self)
	def vitals(self,co_ord):
		return str(int(self.pos[co_ord]))+str(int(self.vel[co_ord]))



#Test 1 - PassA
mio = Moon('io',-1,0,2)
meuropa= Moon('europa',2,-10,-7)
mganymede= Moon('ganyemede',4,-8,8)
mcallisto= Moon('callisto',3,5,-1)
#Test 2 - PassA
# mio = Moon(-8,-10,0)
# meuropa= Moon(5,5,10)
# mganymede= Moon(2,-7,3)
# mcallisto= Moon(9,-8,-3)
#myinput-passedA
# mio = Moon(-16,-1,-12)
# meuropa= Moon(0,-4,-17)
# mganymede= Moon(-11,11,0)
# mcallisto= Moon(2,2,-6)




def part2(aloopnum):
	moonlist =[mio,meuropa,mganymede,mcallisto]
	loop=1
	mysum =0
	statelist=[set(),set(),set()] #xstateset = stateset[0]
	while loop<aloopnum:
		comprehensivemoonstate ='' #below for loops represents a timestep
		for moon in moonlist:
			for othermoons in moonlist: #? velocity due to planet gravities.
				if moon!=othermoons:
					for index in range(0,3):
						if moon.pos[index] < othermoons.pos[index]:
							moon.vel[index]+=0.5
							othermoons.vel[index]-=0.5
							continue
						elif moon.pos[index] > othermoons.pos[index]:
							moon.vel[index]-=0.5
							othermoons.vel[index]+=0.5
							continue #deleted elif == because it was self-evidently redundant. # #   #a

		for moon in moonlist:
			for co_ord in range(0,3):
				moon.pos[co_ord]+=moon.vel[co_ord]
				statelist[co_ord].add(Moon.vitals(moon,co_ord))#(moon.pos[index]+moon.vel[index])
		print(loop)
		loop+=1
		print(len(statelist))
		return loop,statelist

print(part2(7))
